{"version":3,"sources":["Components/Cutting.js","Components/Bulking.js","Components/Weight.js","App.js","serviceWorker.js","index.js"],"names":["Cutting","props","console","log","fatLoss","calories","weight","protein","Math","floor","carb","fat","className","Bulking","fatMass","bodyfat","muscleMass","Weight","state","Bodyfat","handleWeight","e","setState","target","value","handleBodyFat","this","type","onChange","placeholder","class","Component","App","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OA+BeA,EA7BC,SAACC,GACbC,QAAQC,IAAIF,GAKZ,IAAMG,EAAU,CACZC,SAAyB,GAAfJ,EAAMK,OAChBC,QAASC,KAAKC,MAAqB,GAAfR,EAAMK,OAAc,GAAM,GAC9CI,KAAMF,KAAKC,MAAqB,GAAfR,EAAMK,OAAc,IAAO,GAC5CK,IAAKH,KAAKC,MAAqB,GAAfR,EAAMK,OAAc,GAAM,IAI9C,OACI,yBAAKM,UAAU,aAEf,wCACI,+BACI,4BACI,yCAAgBR,EAAQC,UACxB,wCAAeD,EAAQG,QAAvB,MACA,sCAAaH,EAAQM,KAArB,MACA,qCAAYN,EAAQO,IAApB,UCELE,EAzBC,SAACZ,GACbC,QAAQC,IAAIF,GAEZ,IAAMa,EAAUb,EAAMK,QAAUL,EAAMc,QAAU,KAC1CC,EAAaf,EAAMK,OAASQ,EAC5BT,EAAWG,KAAKC,MAAmB,GAAbO,GACtBT,EAAUC,KAAKC,MAAmB,EAAbO,GACrBL,EAAMH,KAAKC,MAAkB,GAAXJ,EAAkB,GACpCK,EAAOF,KAAKC,OAAOJ,EAAsB,EAAVE,EAAsB,EAANI,GAAY,GAGjE,OACI,yBAAKC,UAAU,aACf,uCACI,+BACI,4BACI,yCAAgBP,GAChB,wCAAeE,EAAf,MACA,sCAAaG,EAAb,MACA,qCAAYC,EAAZ,UCwDLM,E,2MAxEXC,MAAO,CACHD,OAAO,IACPE,QAAQ,K,EAGZC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,OAAQI,EAAEE,OAAOC,S,EAIzBC,cAAgB,SAACJ,GACb,EAAKC,SAAS,CACVH,QAASE,EAAEE,OAAOC,S,wEAQtB,IAAMV,EAAUN,KAAKC,MAAMiB,KAAKR,MAAMD,QAAUS,KAAKR,MAAMC,QAAU,MAC/DH,EAAaU,KAAKR,MAAMD,OAASH,EAEvC,OACI,yBAAKF,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,8BACI,2BAAOe,KAAK,OAAOC,SAAUF,KAAKN,aAAcS,YAAY,sBADhE,MAGA,8BACI,2BAAOF,KAAK,OAAOC,SAAUF,KAAKD,cAAeI,YAAY,wBADjE,OAOP,yBAAKjB,UAAU,OACf,yBAAKkB,MAAM,UACR,+BACE,4BACE,uCAAaJ,KAAKR,MAAMD,OAAxB,OACA,yCAAeS,KAAKR,MAAMC,QAA1B,SAKJ,yBAAKW,MAAM,UACX,+BACE,4BACE,mDAAyBd,EAAzB,OACA,gDAAsBF,EAAtB,WAKR,yBAAKF,UAAU,aACV,kBAAC,EAAD,CACGN,OAAQoB,KAAKR,MAAMD,OACnBF,QAASW,KAAKR,MAAMC,UAExB,kBAAC,EAAD,CACIb,OAAQoB,KAAKR,MAAMD,OACnBF,QAASW,KAAKR,MAAMC,gB,GAjEvBY,aCUNC,MATf,WAEE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CAAQqB,KAAM,QCGAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1d2b35aa.chunk.js","sourcesContent":["import React from 'react'\n\nconst Cutting = (props) => {\n    console.log(props);\n\n\n\n\n    const fatLoss = {\n        calories: props.weight * 22,\n        protein: Math.floor(props.weight * 22 * 0.3 / 4),\n        carb: Math.floor(props.weight * 22 * 0.15 / 4),\n        fat: Math.floor(props.weight * 22 * 0.5 / 9)\n    };\n\n\n    return(\n        <div className=\"container\"> \n\n        <h3>Fat loss</h3>\n            <table>\n                <tr>\n                    <td>Calories: { fatLoss.calories }</td>\n                    <td>Protein: { fatLoss.protein } g</td>\n                    <td>Carb:  { fatLoss.carb } g</td>\n                    <td>Fat:  { fatLoss.fat } g</td>\n                    </tr>\n            </table>\n        </div>\n)}\n\nexport default Cutting\n\n","import React from 'react'\n\nconst Bulking = (props) => {\n    console.log(props);\n\n    const fatMass = props.weight * (props.bodyfat / 100);\n    const muscleMass = props.weight - fatMass;\n    const calories = Math.floor(muscleMass * 44);\n    const protein = Math.floor(muscleMass * 2);\n    const fat = Math.floor((calories * 0.3) / 9);\n    const carb = Math.floor((calories - (protein * 4) - (fat * 9)) / 4);\n\n\n    return(\n        <div className=\"container\">\n        <h3>Bulk Up</h3>\n            <table>\n                <tr>\n                    <td>Calories: { calories }</td>\n                    <td>Protein: { protein } g</td>\n                    <td>Carb:  { carb } g</td>\n                    <td>Fat:  { fat } g</td>\n                    </tr>\n            </table>   \n        </div>\n)}\n\nexport default Bulking\n\n","import React, { Component } from 'react'\nimport Cutting from './Cutting'\nimport Bulking from './Bulking'\n\nclass Weight extends Component {\n    state ={\n        Weight:'0',\n        Bodyfat:'0'\n    }\n\n    handleWeight = (e) => {\n        this.setState({\n            Weight: e.target.value\n        });\n    }\n\n    handleBodyFat = (e) => {\n        this.setState({\n            Bodyfat: e.target.value\n        });\n    }\n\n\n\n    render() {\n        \n        const fatMass = Math.floor(this.state.Weight * (this.state.Bodyfat / 100));\n        const muscleMass = this.state.Weight - fatMass;\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"input-field col s6\">\n                        <form>\n                            <input type=\"text\" onChange={this.handleWeight} placeholder=\"Enter your weight\"/>Kg\n                        </form>\n                        <form>\n                            <input type=\"text\" onChange={this.handleBodyFat} placeholder=\"Enter your body fat\"/>%\n                            </form>\n                    </div>\n\n                </div>\n\n                 <div className=\"row\">\n                 <div class=\"col s6\">\n                    <table>\n                      <tr>\n                        <p> Weight: {this.state.Weight} Kg</p>\n                        <p> Body Fat: {this.state.Bodyfat} %</p>\n                      </tr>\n                    </table>   \n                    </div>\n\n                    <div class=\"col s6\">\n                    <table>\n                      <tr>\n                        <p>Current Muscle Mass: {muscleMass} Kg</p>     \n                        <p>Current Fat Mass: {fatMass} Kg</p>\n                     </tr>\n                    </table>  \n                    </div>\n                </div>\n                <div className=\"container\">\n                     <Cutting \n                        weight={this.state.Weight} \n                        bodyfat={this.state.Bodyfat} \n                    />\n                    <Bulking \n                        weight={this.state.Weight} \n                        bodyfat={this.state.Bodyfat} \n                    />\n                 </div>\n            </div>\n            )\n    }\n}\n\nexport default Weight;\n","import React from 'react';\nimport './App.css';\nimport Weight from './Components/Weight'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Weight name={\"A\"} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}